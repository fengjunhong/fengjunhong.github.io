{"meta":{"title":"冯绍峰","subtitle":"若命运不公，就和他斗到底","description":"纸上得来终觉浅，绝知此事要躬行。——陆游","author":"我爱吃肉肉","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-11-27T03:03:16.753Z","updated":"2019-11-27T03:03:16.753Z","comments":true,"path":"404/index.html","permalink":"http://yoursite.com/404/index.html","excerpt":"","text":"404 L2Dwidget.init({\"model\":{\"jsonPath\":\"/live2dw/assets/z16.model.json\"},\"display\":{\"position\":\"left\",\"width\":200,\"height\":450},\"mobile\":{\"show\":true},\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"标签","date":"2019-11-26T09:31:07.000Z","updated":"2019-11-27T01:35:27.271Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-11-26T09:14:17.000Z","updated":"2019-11-27T01:28:41.095Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"vue个人笔记总结","slug":"vue个人笔记总结","date":"2019-11-28T01:53:20.000Z","updated":"2019-11-28T03:12:42.167Z","comments":true,"path":"2019/11/28/vue个人笔记总结/","link":"","permalink":"http://yoursite.com/2019/11/28/vue%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/","excerpt":"es6的用法let1234特点：1、局部作用域2、不会存在变量提升3、变量不能重复声明 const1234特点：1、局部作用域2、不会存在变量提升3、不能重复声明,只声明常量,不可变的量","text":"es6的用法let1234特点：1、局部作用域2、不会存在变量提升3、变量不能重复声明 const1234特点：1、局部作用域2、不会存在变量提升3、不能重复声明,只声明常量,不可变的量 vue的介绍vue的基本引入和创建1.下载 1&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt; 2.引包 1&lt;script src=\"./vue.js\"&gt;&lt;/script&gt; 3.实例化 12345678// 3、实例化对象new Vue(&#123; el:\"#app\", // 绑定那块地 data:&#123; name:\"冯绍峰\", msg:\"黄瓜\" &#125;&#125;) Vue的模板语法可以插入任何你想插入的内容,除了if else ,if else用三元运算符代替 12345678&lt;!--模板语法--&gt;&lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; 'haha' &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; 1+1 &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; &#123;'name':'alex'&#125; &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; 1&gt;2 ? '真的' : '假的' &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; msg.split('').reverse().join('') &#125;&#125;&lt;/h2&gt; vue的指令系统v-text和v-html 12v-text 相当于innerTextv-html 相当于innerHtml v-if 和v-show 1v-show 相当于 style.display v-if 和 v-show的区别 1234567v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。 v-bind 和 v-on 12v-bind 可以绑定标签中任何属性v-on 可以监听js中所有事件 v-bind 123456789101112131415161718192021&lt;body&gt; &lt;div id=\"app\" &gt; &lt;img v-bind:src=\"imgSrc\" v-bin:alt=\"error\"&gt; &lt;/div&gt;&lt;!--1、引包--&gt;&lt;script src=\"./vue.js\"&gt;&lt;/script&gt;&lt;script&gt; //数据驱动视图 设计模式 MVVM Model View ViewModel new Vue(&#123; el:\"#app\", data() &#123; // data是一个函数 函数中return一个对象，可以是空对象 但不能不return return&#123; imgSrc:\"1.jpg\", error:\"美女校花\" &#125; &#125; &#125;)&lt;/script&gt;&lt;/body&gt; v-on 123456789101112131415161718192021222324252627282930313233343536373839&lt;body&gt;&lt;!--1、引包--&gt;&lt;script src=\"./vue.js\"&gt;&lt;/script&gt;&lt;style&gt; .box &#123; width: 500px; height: 300px; background-color: red; &#125;&lt;/style&gt;&lt;div id=\"content\"&gt; &lt;button v-on:click=\"handlerClick\" v-text=\"btn_isShow\"&gt;&lt;/button&gt; &lt;div class=\"box\" v-show='isShow'&gt;&lt;/div&gt;&lt;/div&gt;&lt;script src=\"vue.js\"&gt;&lt;/script&gt;&lt;script&gt; new Vue(&#123; el: \"#content\", data() &#123; return &#123; msg: \"&lt;h2 style='color: blue;'&gt;alex&lt;/h2&gt;\", isShow: true, btn_isShow:\"隐藏\" &#125; &#125;, methods: &#123; handlerClick() &#123; if(this.isShow==true)&#123; this.btn_isShow=\"显示\" &#125;else&#123; this.btn_isShow=\"隐藏\" &#125; this.isShow = !this.isShow &#125; &#125; &#125;)&lt;/script&gt;&lt;/body&gt; 组件之间的传值[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-zqrnkhV4-1574906191338)(C:\\Users\\Mr.Feng\\AppData\\Roaming\\Typora\\typora-user-images\\image-20191120212450590.png)] 父组件向子组件传值 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" xmlns:v-bind=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\" &gt; &lt;App/&gt; &lt;/div&gt;&lt;!--1、引包--&gt;&lt;script src=\"./vue.js\"&gt;&lt;/script&gt;&lt;script&gt; Vue.component('Vbtn',&#123; data() &#123; return&#123;&#125; &#125;, props: ['id'], template:`&lt;button&gt;&#123;&#123; id &#125;&#125;&lt;/button&gt;` &#125;) let Vheader=&#123; data()&#123; return&#123;&#125; &#125;, //只要声明了父组件的属性，就可以使用 props:['msg',], template:`&lt;div&gt; &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt; &lt;/div&gt; ` , &#125; //1、声子 let App = &#123; data()&#123; return&#123; text:\"我是父组件的数据\", &#125; &#125;, template: `&lt;div class=\"a\"&gt; &lt;Vheader :msg=\"text\"&gt;&lt;/Vheader&gt; &lt;/div&gt; ` , components: &#123; Vheader &#125; &#125; new Vue(&#123; el:\"#app\", data()&#123; return&#123; msg:\"alex\", &#125; &#125;, components:&#123; //2、挂子 App &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 子组件向父组件传值 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" xmlns:v-bind=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\" &gt; &lt;App/&gt; &lt;/div&gt;&lt;!--1、引包--&gt;&lt;script src=\"./vue.js\"&gt;&lt;/script&gt;&lt;script&gt; Vue.component('Vbtn',&#123; data() &#123; return&#123;&#125; &#125;, props: ['id'], template:`&lt;button @click=\"clickHandler\"&gt;&#123;&#123; id &#125;&#125;&lt;/button&gt;`, methods:&#123; clickHandler()&#123; this.id++ //每个组件中的指的基当期组件对象 console.log(this) //this.$emit('父组件声明自定义的事件','传值') this.$emit(\"clickHandler\",this.id) &#125; &#125; &#125;) let Vheader=&#123; data()&#123; return&#123;&#125; &#125;, created() &#123; console.log(this) &#125;, props:['msg','post'], template:`&lt;div&gt; &lt;h2&gt;&#123;&#123; msg &#125;&#125;:&#123;&#123; post.id &#125;&#125;&lt;/h2&gt; &lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt; &lt;Vbtn :id=\"post.id\" @clickHandler=\"clickHandler\"&gt;&lt;/Vbtn&gt; &lt;/div&gt; ` , methods: &#123; clickHandler(val)&#123; this.$emit(\"click_handler\",val) &#125; &#125; &#125; //1、声子 let App = &#123; data()&#123; return&#123; text:\"我是父组件的数据\", post: &#123; id: 1, title: 'My Journey with Vue' &#125; &#125; &#125;, created() &#123; console.log(this) &#125;, template: `&lt;div class=\"a\"&gt; 我是父组件的 &#123;&#123; post.id &#125;&#125; &lt;Vheader :msg=\"text\" :post=\"post\" @click_handler=\"click_handler\"&gt;&lt;/Vheader&gt; &lt;/div&gt; ` , components: &#123; Vheader &#125;, methods:&#123; click_handler(val)&#123; this.post.id=val &#125; &#125; &#125; new Vue(&#123; el:\"#app\", data()&#123; return&#123; msg:\"alex\", &#125; &#125;, created() &#123; console.log(this) &#125;, components:&#123; //2、挂子 App &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 平行组件之间的传值 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" xmlns:v-bind=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\" &gt; &lt;first&gt;&lt;/first&gt; &lt;second&gt;&lt;/second&gt; &lt;/div&gt;&lt;!--1、引包--&gt;&lt;script src=\"./vue.js\"&gt;&lt;/script&gt;&lt;script&gt; //声明全局Vue对象 let bus=new Vue() //组件二 Vue.component(\"second\",&#123; data() &#123; return&#123; text:\"\" &#125; &#125;, created()&#123; bus.$on('testData',(val)=&gt;&#123; console.log(this) this.text=val &#125;) &#125;, template: `&lt;h3&gt;&#123;&#123; text &#125;&#125;&lt;/h3&gt;` &#125;) //组件一 Vue.component(\"first\",&#123; data() &#123; return&#123; msg:\"我是组件1️⃣\" &#125; &#125;, template:`&lt;button @click=\"clickHandler\"&gt;数据迁移&lt;/button&gt;`, methods:&#123; clickHandler()&#123; bus.$emit(\"testData\",this.msg) &#125; &#125; &#125;) //创建Vue实例 new Vue(&#123; el:\"#app\", data()&#123; return&#123;&#125; &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 生命周期钩子函数 beforeCreate 组件创建之前 created 组件创建之后 beforeMount 组件挂载之前 mounted 组件挂载之后 [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2WDmruFs-1574906191341)(C:\\Users\\Mr.Feng\\AppData\\Roaming\\Typora\\typora-user-images\\image-20191121222550856.png)] beforeUpdate updated activated 激活当前组件 deactivated ​ keep- alive Vue提供的内置组件，主要作用 ,让组件产生缓存 ​ 停用当前组件 beforeDestroy destroyed ​ 如果开了定时器,一定要关闭定时器、 vue-router的基本使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt; &lt;App/&gt; &lt;/div&gt; &lt;script src=\"vue.js\"&gt;&lt;/script&gt; &lt;script src=\"vue-router.js\"&gt;&lt;/script&gt; &lt;script&gt; const Home = &#123; data()&#123; return&#123;&#125; &#125;, template: `&lt;div&gt;我是主页&lt;/div&gt;` &#125; const Course = &#123; data()&#123; return&#123;&#125; &#125;, template: `&lt;div&gt;我是免费课程&lt;/div&gt;` &#125; // 创建router实例 const router = new VueRouter(&#123; // 定义router规则 routes:[ &#123; path:'/', component : Home &#125;, &#123; path:'/Course', component : Course &#125; ] &#125;) let App = &#123; data() &#123; return &#123;&#125; &#125;, template: `&lt;div&gt; &lt;div class=\"header\"&gt; &lt;router-link to=\"/\"&gt;首页&lt;/router-link&gt; &lt;router-link to=\"/Course\"&gt;免费课程&lt;/router-link&gt; &lt;/div&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; `, &#125; new Vue(&#123; el : \"#app\", router, data()&#123; return&#123;&#125; &#125;, components:&#123; App &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 命名路由123456789101112131415161718192021routes:[ # 定义路由规则 &#123; path:'/dfssf', name:'Home', component : Home &#125;, &#123; path:'/Coursedddddddddddddddddd', name:'Course', component : Course &#125;]template: `&lt;div&gt; &lt;div class=\"header\"&gt; &lt;router-link :to=\"&#123;name:'Home'&#125;\"&gt;首页&lt;/router-link&gt; &lt;router-link :to=\"&#123;name:'Course'&#125;\"&gt;免费课程&lt;/router-link&gt; &lt;/div&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; `, 动态路由匹配1提醒一下，当使用路由参数时，例如从 /user/foo 导航到 /user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。 1234created()&#123; this.user_id = this.$route.params.id //因此使用此方法，无法获取用户的id consolo.log(this.$route)&#125; 复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch (监测变化) $route 对象： 12345watch: &#123; '$route' (to, from) &#123; // 对路由变化作出响应... &#125; &#125; 编程式的导航","categories":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/categories/vue/"}],"tags":[{"name":"个人笔记","slug":"个人笔记","permalink":"http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/"}]},{"title":"测试换电脑hexo","slug":"测试换电脑hexo","date":"2019-11-28T00:51:21.000Z","updated":"2019-11-28T00:51:21.069Z","comments":true,"path":"2019/11/28/测试换电脑hexo/","link":"","permalink":"http://yoursite.com/2019/11/28/%E6%B5%8B%E8%AF%95%E6%8D%A2%E7%94%B5%E8%84%91hexo/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"薛之谦-演员","slug":"music","date":"2019-11-28T00:28:33.973Z","updated":"2019-11-27T09:25:16.387Z","comments":true,"path":"2019/11/28/music/","link":"","permalink":"http://yoursite.com/2019/11/28/music/","excerpt":"","text":"","categories":[{"name":"娱乐","slug":"娱乐","permalink":"http://yoursite.com/categories/%E5%A8%B1%E4%B9%90/"}],"tags":[{"name":"歌曲","slug":"歌曲","permalink":"http://yoursite.com/tags/%E6%AD%8C%E6%9B%B2/"}]},{"title":"hexo个人博客的细节优化","slug":"hexo个人博客的细节优化","date":"2019-11-27T08:27:12.000Z","updated":"2019-11-28T03:09:33.999Z","comments":true,"path":"2019/11/27/hexo个人博客的细节优化/","link":"","permalink":"http://yoursite.com/2019/11/27/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%86%E8%8A%82%E4%BC%98%E5%8C%96/","excerpt":"1、添加分享功能 找到主题配置文件（\\themes \\ next \\ _config.yml）,如下修改即可 123baidushare: type: button baidushare: true","text":"1、添加分享功能 找到主题配置文件（\\themes \\ next \\ _config.yml）,如下修改即可 123baidushare: type: button baidushare: true 2、修改文章间距 找到 \\themes \\ next \\ source \\ css \\ _custom \\ _custom.styl 1234567.post &#123; margin-top: 0px; # 上外边距 margin-bottom: 60px; # 下外边距 padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; Next官网：Next官网链接 3、修改内容区域的宽度 next主题的默认宽度（width：700px）如下图所示，太窄打开 \\themes \\ next \\ source \\ css \\ _variables \\ custom.styl 添加两行代码即可： 123# 路径：\\themes\\next\\source\\css\\_variables\\custom.styl$main-desktop = 1200px $content-desktop = 900px 看效果，此时width: 900px","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[]},{"title":"hexo创建分类和标签","slug":"hexo创建分类和标签","date":"2019-11-27T01:42:29.000Z","updated":"2019-11-27T02:27:06.648Z","comments":true,"path":"2019/11/27/hexo创建分类和标签/","link":"","permalink":"http://yoursite.com/2019/11/27/hexo%E5%88%9B%E5%BB%BA%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/","excerpt":"1、修改主题配置文件路径：blog \\ themes \\ next \\ _config.yml 1234567menu: home: / #about: /about/ || user #tags: /tags/ || tags categories: /categories/ archives: /archives/ || archive tags: /tags/","text":"1、修改主题配置文件路径：blog \\ themes \\ next \\ _config.yml 1234567menu: home: / #about: /about/ || user #tags: /tags/ || tags categories: /categories/ archives: /archives/ || archive tags: /tags/ 2、创建文件categories和tags文件 12hexo new page categories # 创建分类文件hexo new page tags # 创建标签文件 3、修改categories/index.md和tags/index.md文件 categories/index.md的文件内容如下： 12345---title: 分类date: 2019-11-26 17:14:17type: \"categories\"--- tags/index.md的文件内容如下： 12345---title: 标签date: 2019-11-26 17:14:17type: \"tags\"--- 4、修改source / _posts / musci.md 文章内容 123456title: 薛之谦-演员top: truecategories: 娱乐tags: - 歌曲 5、实现效果","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[]},{"title":"使用hexo和github搭建个人博客","slug":"hexo和github搭建博客","date":"2019-11-26T01:45:53.000Z","updated":"2019-11-28T01:47:36.647Z","comments":true,"path":"2019/11/26/hexo和github搭建博客/","link":"","permalink":"http://yoursite.com/2019/11/26/hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"问题一：nrm : 无法加载文件 C:\\Users\\TANG\\AppData\\Roaming\\npm\\nrm.ps1，因为在此系统上禁止运行脚本。 处理方式： https://www.cnblogs.com/lingblog/p/11845011.html 搭建博客步骤GitHub创建个人仓库 登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：Build software better, together 点击GitHub中的New repository创建新仓库，仓库名应该为：用户名.http://github.io 这个用户名使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看廖雪峰老师的Git教程：Git教程 从Git官网下载：Git - Downloading Package 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash 12git config --global user.name \"你的GitHub用户名\"git config --global user.email \"你的GitHub注册邮箱\" 生成ssh密钥文件： 1ssh-keygen -t rsa -C \"你的GitHub注册邮箱\" 然后直接三个回车即可，默认不需要设置密码然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制 新建SSH密钥 安装Node.js Hexo基于Node.js，Node.js下载地址：Download | Node.js 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v : 安装Hexo Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为MyBlog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行 1npm install -g hexo-cli 这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入： 1hexo init blog 注意，这里的命令都是切换到blog文件夹中。 1234PS D:\\MyProject\\MyBlog&gt; cd blog hexo new test_my_site hexo g # 生成 hexo s # 启动服务 这些命令在后面作介绍，完成后，打开浏览器输入地址： localhost:4000 转载","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"}]}]}