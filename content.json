{"meta":{"title":"森林里的麋鹿","subtitle":"若命运不公，就和他斗到底","description":"纸上得来终觉浅，绝知此事要躬行。——陆游","author":"我爱吃肉肉","url":"https://fengjunhong.github.io","root":"/"},"pages":[{"title":"","date":"2020-08-29T07:34:54.150Z","updated":"2020-08-29T06:51:48.926Z","comments":true,"path":"404/index.html","permalink":"https://fengjunhong.github.io/404/index.html","excerpt":"","text":"404 L2Dwidget.init({\"model\":{\"jsonPath\":\"/live2dw/assets/z16.model.json\"},\"display\":{\"position\":\"right\",\"width\":200,\"height\":450},\"mobile\":{\"show\":false},\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false});"},{"title":"archives","date":"2019-11-28T08:46:21.000Z","updated":"2020-08-29T06:51:48.930Z","comments":true,"path":"archives/index.html","permalink":"https://fengjunhong.github.io/archives/index.html","excerpt":"","text":""},{"title":"前端知识汇总","date":"2020-08-31T13:43:16.000Z","updated":"2020-12-27T11:40:21.388Z","comments":true,"path":"categories/index.html","permalink":"https://fengjunhong.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-11-26T09:31:07.000Z","updated":"2020-08-29T06:51:48.931Z","comments":true,"path":"tags/index.html","permalink":"https://fengjunhong.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"java文件下载","slug":"java文件下载","date":"2021-01-14T07:29:24.000Z","updated":"2021-01-14T07:39:51.624Z","comments":true,"path":"2021/01/14/java文件下载/","link":"","permalink":"https://fengjunhong.github.io/2021/01/14/java%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/","excerpt":"","text":"方式一、采用文件输出流 12345678910111213141516171819202122232425262728293031/** * 文件下载 */@RequestMapping(\"/downServiceAgreement\")public void downServiceAgreement(HttpServletRequest request, HttpServletResponse response)&#123; AuthCompanyUser user = CurrentUserHolder.getUser(); assert user != null; try &#123; // 文件的绝对路径 String downCertApplyPath = orderService.downServiceAgreement(); //告诉浏览器输出内容为流 response.setContentType(\"application/octet-stream\"); response.setHeader(\"Content-Disposition\", \"attachment;fileName= \" + URLEncoder.encode(\"文件名称\", \"utf-8\") + \".pdf\"); OutputStream outputStream = response.getOutputStream(); FileInputStream fileInputStream = new FileInputStream(downCertApplyPath); //缓存区 byte[] buffer = new byte[1024]; while (fileInputStream.read(buffer) != -1) &#123; outputStream.write(buffer); &#125; outputStream.flush(); fileInputStream.close(); outputStream.close(); // 删除当前文件 FileUtil.deleteFile(new File(downCertApplyPath)); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; 前端代码： 1window.location.href = '$&#123;ctx&#125;/downServiceAgreement';","categories":[{"name":"java","slug":"java","permalink":"https://fengjunhong.github.io/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"https://fengjunhong.github.io/tags/java/"},{"name":"文件下载","slug":"文件下载","permalink":"https://fengjunhong.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"}]},{"title":"前端知识汇总","slug":"前端知识汇总","date":"2020-08-31T13:43:00.000Z","updated":"2020-11-02T13:52:35.452Z","comments":true,"path":"2020/08/31/前端知识汇总/","link":"","permalink":"https://fengjunhong.github.io/2020/08/31/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%B1%87%E6%80%BB/","excerpt":"jquery知识汇总鼠标箭头变手势1style=\"cursor:pointer;\" layui知识汇总tips1234layer.tips('个人证书，请点击我', '#personCert', &#123; tips: [1, 'rgb(19, 97, 254)'], tipsMore : true&#125;); 参数说明：`` options:tips的配置型[tips位置：1上；2右；3下；4左,背景颜色] tipsMore设置是否允许弹出多个tips","text":"jquery知识汇总鼠标箭头变手势1style=\"cursor:pointer;\" layui知识汇总tips1234layer.tips('个人证书，请点击我', '#personCert', &#123; tips: [1, 'rgb(19, 97, 254)'], tipsMore : true&#125;); 参数说明：`` options:tips的配置型[tips位置：1上；2右；3下；4左,背景颜色] tipsMore设置是否允许弹出多个tips input12&lt;input type=\"email\" name=\"email\" lay-reqText=\"请输入qq邮箱\" lay-verify=\"required|email\" autocomplete=\"off\" class=\"layui-input\"&gt; 参数说明： lay-reqText：自定义非空提示语 autocomplete=”off” : 关闭显示历史记录 data-属性12345678910&lt;input type=\"checkbox\" name=\"signType\" value=\"0\" data-price=\"$&#123;certPrice.projectManagerSign&#125;\" lay-skin=\"primary\" title=\"项目经理章\" lay-filter=\"signType\"&gt;// .....（省略部分代码）form.on('checkbox(signType)', function(data)&#123; console.log(data.elem); //得到checkbox原始DOM对象 // 将DOM对象转换为jquery对象，再调用attr()方法 var price = $(data.elem).attr(\"data-price\");&#125;); radio说明：用于多组单选框，联动选中的效果 123456 // 企业类型：招、投标单位form.on('radio(companyType)', function(data)&#123; // 联动 ==&gt; 证书类型 var certType = document.getElementsByName(\"certType\"); $(certType[data.value]).next().click();&#125;); checkbox1234// checkbox是否被选中var companyCertIsChecked = $(\"input[name='userType']\").is(':checked');// 第一个checkbox是否被选中var companyCertIsChecked = $(\"input[name='userType']\").get(0).checked; switch(开关按钮)12345678910111213form.on(&apos;switch(filter)&apos;, function(data)&#123; //开关是否开启，true或者false var checked = data.elem.checked; var _index = layer.confirm(&apos;确定要进行此操作吗？&apos;, &#123;icon: 3, btn: [&apos;确定&apos;,&apos;取消&apos;] //按钮 &#125;, function()&#123; layer.close(_index) &#125;, function()&#123; data.elem.checked=!checked; // 取消 form.render(); &#125;);&#125;); layer.msg12345var loadindex = layer.msg(&apos;数据保存中，请稍等...&apos;, &#123; icon: 16, shade: [0.3, &apos;#393D49&apos;], time: 0&#125;);","categories":[{"name":"前端","slug":"前端","permalink":"https://fengjunhong.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[],"author":"我爱吃肉肉"},{"title":"薛之谦-演员","slug":"music","date":"2020-08-29T06:51:48.927Z","updated":"2020-08-29T06:51:48.927Z","comments":true,"path":"2020/08/29/music/","link":"","permalink":"https://fengjunhong.github.io/2020/08/29/music/","excerpt":"","text":"","categories":[{"name":"娱乐","slug":"娱乐","permalink":"https://fengjunhong.github.io/categories/%E5%A8%B1%E4%B9%90/"}],"tags":[{"name":"歌曲","slug":"歌曲","permalink":"https://fengjunhong.github.io/tags/%E6%AD%8C%E6%9B%B2/"}]},{"title":"第一个单页面应用","slug":"第一个单页面应用","date":"2019-12-04T00:56:40.000Z","updated":"2020-08-29T06:51:48.929Z","comments":true,"path":"2019/12/04/第一个单页面应用/","link":"","permalink":"https://fengjunhong.github.io/2019/12/04/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8/","excerpt":"初始化项目12345678910vue-init webpack-simple my-project //my-project为项目名// 此处选择noUse sass? No // 依次执行如下代码 To get started: cd 001-my-project npm install npm run dev","text":"初始化项目12345678910vue-init webpack-simple my-project //my-project为项目名// 此处选择noUse sass? No // 依次执行如下代码 To get started: cd 001-my-project npm install npm run dev 出现下图表示，脚手架初步完成 安装vue-router1npm install vue-router --save 写逻辑代码目录结构 修改main.js1234567891011import Vue from 'vue'import App from './App.vue'// 引入routerimport router from './routers/index'new Vue(&#123; el: '#app', router, //挂载router render: h =&gt; h(App)&#125;) 新增router文件夹说明：在src下自行创建routers/index.js文件 暴露router说明：由于在main.js文件中引入了router,因此必须在这里导出router 12345678910111213141516171819202122232425// 引入vue和vue-router的包import Vue from 'vue'import VueRouter from 'vue-router'Vue.use(VueRouter);// 引入用户组件，下面步骤创建import Home from '../components/Home/Home'import Course from '../components/Course/Course'const router = new VueRouter(&#123; routes:[ &#123; name:'home', path:'/Home', component:Home &#125;, &#123; name:'course', path:'/Course', component:Course &#125;, ]&#125;)// 导出routerexport default router; 新建components文件夹说明：此文件夹存放所有的组件 Home.vue代码123456789101112131415&lt;template&gt; &lt;div&gt;我是首页&lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name:'Home', data()&#123; return&#123; &#125; &#125; &#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; Course.vue代码123456789101112131415&lt;template&gt; &lt;div&gt;我是免费课程&lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name:'Course', data()&#123; return&#123; &#125; &#125; &#125;&lt;/script&gt;&lt;style&gt;&lt;/style&gt; 修改App.vue文件说明：在App.vue文件中添加如下内容 123456789101112&lt;template&gt; &lt;div id=\"app\"&gt; &lt;img src=\"./assets/logo.png\"&gt; &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt; &lt;router-link :to=\"&#123;name:'Home'&#125;\"&gt;首页&lt;/router-link&gt; &lt;router-link :to=\"&#123;name:'Course'&#125;\"&gt;免费课程&lt;/router-link&gt; &lt;!-- 路由匹配到的组件将显示在这里 --&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt; 启动项目","categories":[{"name":"vue","slug":"vue","permalink":"https://fengjunhong.github.io/categories/vue/"}],"tags":[]},{"title":"vue init时报错","slug":"vue-init时报错","date":"2019-12-03T13:02:42.000Z","updated":"2020-08-29T06:51:48.928Z","comments":true,"path":"2019/12/03/vue-init时报错/","link":"","permalink":"https://fengjunhong.github.io/2019/12/03/vue-init%E6%97%B6%E6%8A%A5%E9%94%99/","excerpt":"执行如下代码抛错： 1vue init webpack-simple 04-my-project","text":"执行如下代码抛错： 1vue init webpack-simple 04-my-project 解决方案： vue init 改为vue-init 转载：https://blog.csdn.net/qq_39513971/article/details/79408684","categories":[{"name":"vue","slug":"vue","permalink":"https://fengjunhong.github.io/categories/vue/"}],"tags":[]},{"title":"vue -V不是内部或外部命令","slug":"vue-V不是内部或外部命令","date":"2019-12-02T14:35:50.000Z","updated":"2020-08-29T06:51:48.928Z","comments":true,"path":"2019/12/02/vue-V不是内部或外部命令/","link":"","permalink":"https://fengjunhong.github.io/2019/12/02/vue-V%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"vue -V 不是内部或外部命令，也不是可运行的程序或批处理文件那么面对此问题，该如何解决呢？ 全局搜索vue.cmd，打开文件所在位置，将vue.cmd所在的路径添加到环境变量Path中，重新打开控制台，再次执行vue -V.即可","categories":[{"name":"常见问题","slug":"常见问题","permalink":"https://fengjunhong.github.io/categories/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://fengjunhong.github.io/tags/vue/"}]},{"title":"webpack","slug":"webpack","date":"2019-12-02T11:52:22.000Z","updated":"2020-08-29T06:51:48.929Z","comments":true,"path":"2019/12/02/webpack/","link":"","permalink":"https://fengjunhong.github.io/2019/12/02/webpack/","excerpt":"webpack全局安装webpack1npm install webpack@3.12.0 -g 卸载webpack1npm uninstall webpack -g","text":"webpack全局安装webpack1npm install webpack@3.12.0 -g 卸载webpack1npm uninstall webpack -g 打包命令webpack1webpack ./main.js ./bundle.js webpack模块的使用 nodejs安装npm init –yes 默认生成一个 package.json(管理整个项目中的包)","categories":[{"name":"webpack","slug":"webpack","permalink":"https://fengjunhong.github.io/categories/webpack/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://fengjunhong.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"hexo博客换电脑如何维护","slug":"hexo博客换电脑如何维护","date":"2019-11-29T03:16:19.000Z","updated":"2020-08-29T06:51:48.927Z","comments":true,"path":"2019/11/29/hexo博客换电脑如何维护/","link":"","permalink":"https://fengjunhong.github.io/2019/11/29/hexo%E5%8D%9A%E5%AE%A2%E6%8D%A2%E7%94%B5%E8%84%91%E5%A6%82%E4%BD%95%E7%BB%B4%E6%8A%A4/","excerpt":"前言：我们使用hexo+github搭建的博客，源代码文件都在本地，如果我们电脑出现问题或者其他情况，需要换电脑维护博客，该怎么办？ 方式一 拷贝文件把你本地的源代码，拷贝到其他电脑，安装必须的环境，即可。","text":"前言：我们使用hexo+github搭建的博客，源代码文件都在本地，如果我们电脑出现问题或者其他情况，需要换电脑维护博客，该怎么办？ 方式一 拷贝文件把你本地的源代码，拷贝到其他电脑，安装必须的环境，即可。 方式二 借助github实现多终端维护博客在github上创建分支 上传源代码把新建的分支克隆至本地，只保留.git，其他全部删除，将hexo源代码拷贝至此，我直接将整个文件夹放到这里了,然后重新上传代码，设置分支为hexo_blog 查看源代码 本地启动现在你可以在当前文件夹下，打开power shell本地启动成功，然后修改你的博客，即可 同步至github12hexo clean # 清理缓存hexo g -d # 生成并发布 此时可以看到我们前面修改的代码已经提交至master分支了，使用你自己的github来访问就可以了，我的博客 提交源代码前面我们只是更新了master分支的数据更新源代码：借助GitHub Desktop上传源代码至hexo_blog分支即可。 总结其实就是master分支存储显示文件，hexo_blog分支存储源代码文件","categories":[{"name":"hexo","slug":"hexo","permalink":"https://fengjunhong.github.io/categories/hexo/"}],"tags":[]},{"title":"vue个人笔记总结","slug":"vue个人笔记总结","date":"2019-11-28T01:53:20.000Z","updated":"2020-08-29T06:51:48.928Z","comments":true,"path":"2019/11/28/vue个人笔记总结/","link":"","permalink":"https://fengjunhong.github.io/2019/11/28/vue%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/","excerpt":"es6的用法let1234特点：1、局部作用域2、不会存在变量提升3、变量不能重复声明","text":"es6的用法let1234特点：1、局部作用域2、不会存在变量提升3、变量不能重复声明 const1234特点：1、局部作用域2、不会存在变量提升3、不能重复声明,只声明常量,不可变的量 vue的介绍vue的基本引入和创建1.下载 1&lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt; 2.引包 1&lt;script src=\"./vue.js\"&gt;&lt;/script&gt; 3.实例化 12345678// 3、实例化对象new Vue(&#123; el:\"#app\", // 绑定那块地 data:&#123; name:\"冯绍峰\", msg:\"黄瓜\" &#125;&#125;) Vue的模板语法可以插入任何你想插入的内容,除了if else ,if else用三元运算符代替 12345678&lt;!--模板语法--&gt;&lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; 'haha' &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; 1+1 &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; &#123;'name':'alex'&#125; &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; 1&gt;2 ? '真的' : '假的' &#125;&#125;&lt;/h2&gt;&lt;h2&gt;&#123;&#123; msg.split('').reverse().join('') &#125;&#125;&lt;/h2&gt; vue的指令系统v-text和v-html 12v-text 相当于innerTextv-html 相当于innerHtml v-if 和v-show 1v-show 相当于 style.display v-if 和 v-show的区别 1234567v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。 v-bind 和 v-on 12v-bind 可以绑定标签中任何属性v-on 可以监听js中所有事件 v-bind 123456789101112131415161718192021&lt;body&gt; &lt;div id=\"app\" &gt; &lt;img v-bind:src=\"imgSrc\" v-bin:alt=\"error\"&gt; &lt;/div&gt;&lt;!--1、引包--&gt;&lt;script src=\"./vue.js\"&gt;&lt;/script&gt;&lt;script&gt; //数据驱动视图 设计模式 MVVM Model View ViewModel new Vue(&#123; el:\"#app\", data() &#123; // data是一个函数 函数中return一个对象，可以是空对象 但不能不return return&#123; imgSrc:\"1.jpg\", error:\"美女校花\" &#125; &#125; &#125;)&lt;/script&gt;&lt;/body&gt; v-on 123456789101112131415161718192021222324252627282930313233343536373839&lt;body&gt;&lt;!--1、引包--&gt;&lt;script src=\"./vue.js\"&gt;&lt;/script&gt;&lt;style&gt; .box &#123; width: 500px; height: 300px; background-color: red; &#125;&lt;/style&gt;&lt;div id=\"content\"&gt; &lt;button v-on:click=\"handlerClick\" v-text=\"btn_isShow\"&gt;&lt;/button&gt; &lt;div class=\"box\" v-show='isShow'&gt;&lt;/div&gt;&lt;/div&gt;&lt;script src=\"vue.js\"&gt;&lt;/script&gt;&lt;script&gt; new Vue(&#123; el: \"#content\", data() &#123; return &#123; msg: \"&lt;h2 style='color: blue;'&gt;alex&lt;/h2&gt;\", isShow: true, btn_isShow:\"隐藏\" &#125; &#125;, methods: &#123; handlerClick() &#123; if(this.isShow==true)&#123; this.btn_isShow=\"显示\" &#125;else&#123; this.btn_isShow=\"隐藏\" &#125; this.isShow = !this.isShow &#125; &#125; &#125;)&lt;/script&gt;&lt;/body&gt; 组件之间的传值[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-zqrnkhV4-1574906191338)(C:\\Users\\Mr.Feng\\AppData\\Roaming\\Typora\\typora-user-images\\image-20191120212450590.png)] 父组件向子组件传值 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" xmlns:v-bind=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\" &gt; &lt;App/&gt; &lt;/div&gt;&lt;!--1、引包--&gt;&lt;script src=\"./vue.js\"&gt;&lt;/script&gt;&lt;script&gt; Vue.component('Vbtn',&#123; data() &#123; return&#123;&#125; &#125;, props: ['id'], template:`&lt;button&gt;&#123;&#123; id &#125;&#125;&lt;/button&gt;` &#125;) let Vheader=&#123; data()&#123; return&#123;&#125; &#125;, //只要声明了父组件的属性，就可以使用 props:['msg',], template:`&lt;div&gt; &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;/h2&gt; &lt;/div&gt; ` , &#125; //1、声子 let App = &#123; data()&#123; return&#123; text:\"我是父组件的数据\", &#125; &#125;, template: `&lt;div class=\"a\"&gt; &lt;Vheader :msg=\"text\"&gt;&lt;/Vheader&gt; &lt;/div&gt; ` , components: &#123; Vheader &#125; &#125; new Vue(&#123; el:\"#app\", data()&#123; return&#123; msg:\"alex\", &#125; &#125;, components:&#123; //2、挂子 App &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 子组件向父组件传值 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" xmlns:v-bind=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\" &gt; &lt;App/&gt; &lt;/div&gt;&lt;!--1、引包--&gt;&lt;script src=\"./vue.js\"&gt;&lt;/script&gt;&lt;script&gt; Vue.component('Vbtn',&#123; data() &#123; return&#123;&#125; &#125;, props: ['id'], template:`&lt;button @click=\"clickHandler\"&gt;&#123;&#123; id &#125;&#125;&lt;/button&gt;`, methods:&#123; clickHandler()&#123; this.id++ //每个组件中的指的基当期组件对象 console.log(this) //this.$emit('父组件声明自定义的事件','传值') this.$emit(\"clickHandler\",this.id) &#125; &#125; &#125;) let Vheader=&#123; data()&#123; return&#123;&#125; &#125;, created() &#123; console.log(this) &#125;, props:['msg','post'], template:`&lt;div&gt; &lt;h2&gt;&#123;&#123; msg &#125;&#125;:&#123;&#123; post.id &#125;&#125;&lt;/h2&gt; &lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt; &lt;Vbtn :id=\"post.id\" @clickHandler=\"clickHandler\"&gt;&lt;/Vbtn&gt; &lt;/div&gt; ` , methods: &#123; clickHandler(val)&#123; this.$emit(\"click_handler\",val) &#125; &#125; &#125; //1、声子 let App = &#123; data()&#123; return&#123; text:\"我是父组件的数据\", post: &#123; id: 1, title: 'My Journey with Vue' &#125; &#125; &#125;, created() &#123; console.log(this) &#125;, template: `&lt;div class=\"a\"&gt; 我是父组件的 &#123;&#123; post.id &#125;&#125; &lt;Vheader :msg=\"text\" :post=\"post\" @click_handler=\"click_handler\"&gt;&lt;/Vheader&gt; &lt;/div&gt; ` , components: &#123; Vheader &#125;, methods:&#123; click_handler(val)&#123; this.post.id=val &#125; &#125; &#125; new Vue(&#123; el:\"#app\", data()&#123; return&#123; msg:\"alex\", &#125; &#125;, created() &#123; console.log(this) &#125;, components:&#123; //2、挂子 App &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 平行组件之间的传值 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!DOCTYPE html&gt;&lt;html lang=\"en\" xmlns:v-bind=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\" &gt; &lt;first&gt;&lt;/first&gt; &lt;second&gt;&lt;/second&gt; &lt;/div&gt;&lt;!--1、引包--&gt;&lt;script src=\"./vue.js\"&gt;&lt;/script&gt;&lt;script&gt; //声明全局Vue对象 let bus=new Vue() //组件二 Vue.component(\"second\",&#123; data() &#123; return&#123; text:\"\" &#125; &#125;, created()&#123; bus.$on('testData',(val)=&gt;&#123; console.log(this) this.text=val &#125;) &#125;, template: `&lt;h3&gt;&#123;&#123; text &#125;&#125;&lt;/h3&gt;` &#125;) //组件一 Vue.component(\"first\",&#123; data() &#123; return&#123; msg:\"我是组件1️⃣\" &#125; &#125;, template:`&lt;button @click=\"clickHandler\"&gt;数据迁移&lt;/button&gt;`, methods:&#123; clickHandler()&#123; bus.$emit(\"testData\",this.msg) &#125; &#125; &#125;) //创建Vue实例 new Vue(&#123; el:\"#app\", data()&#123; return&#123;&#125; &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 生命周期钩子函数 beforeCreate 组件创建之前 created 组件创建之后 beforeMount 组件挂载之前 mounted 组件挂载之后 [外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2WDmruFs-1574906191341)(C:\\Users\\Mr.Feng\\AppData\\Roaming\\Typora\\typora-user-images\\image-20191121222550856.png)] beforeUpdate updated activated 激活当前组件 deactivated ​ keep- alive Vue提供的内置组件，主要作用 ,让组件产生缓存 ​ 停用当前组件 beforeDestroy destroyed ​ 如果开了定时器,一定要关闭定时器、 vue-router的基本使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt; &lt;App/&gt; &lt;/div&gt; &lt;script src=\"vue.js\"&gt;&lt;/script&gt; &lt;script src=\"vue-router.js\"&gt;&lt;/script&gt; &lt;script&gt; const Home = &#123; data()&#123; return&#123;&#125; &#125;, template: `&lt;div&gt;我是主页&lt;/div&gt;` &#125; const Course = &#123; data()&#123; return&#123;&#125; &#125;, template: `&lt;div&gt;我是免费课程&lt;/div&gt;` &#125; // 创建router实例 const router = new VueRouter(&#123; // 定义router规则 routes:[ &#123; path:'/', component : Home &#125;, &#123; path:'/Course', component : Course &#125; ] &#125;) let App = &#123; data() &#123; return &#123;&#125; &#125;, template: `&lt;div&gt; &lt;div class=\"header\"&gt; &lt;router-link to=\"/\"&gt;首页&lt;/router-link&gt; &lt;router-link to=\"/Course\"&gt;免费课程&lt;/router-link&gt; &lt;/div&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; `, &#125; new Vue(&#123; el : \"#app\", router, data()&#123; return&#123;&#125; &#125;, components:&#123; App &#125; &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 命名路由123456789101112131415161718192021routes:[ # 定义路由规则 &#123; path:'/dfssf', name:'Home', component : Home &#125;, &#123; path:'/Coursedddddddddddddddddd', name:'Course', component : Course &#125;]template: `&lt;div&gt; &lt;div class=\"header\"&gt; &lt;router-link :to=\"&#123;name:'Home'&#125;\"&gt;首页&lt;/router-link&gt; &lt;router-link :to=\"&#123;name:'Course'&#125;\"&gt;免费课程&lt;/router-link&gt; &lt;/div&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; `, 动态路由匹配1提醒一下，当使用路由参数时，例如从 /user/foo 导航到 /user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。 1234created()&#123; this.user_id = this.$route.params.id //因此使用此方法，无法获取用户的id consolo.log(this.$route)&#125; 复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch (监测变化) $route 对象： 12345watch: &#123; '$route' (to, from) &#123; // 对路由变化作出响应... &#125; &#125; 编程式的导航","categories":[{"name":"vue","slug":"vue","permalink":"https://fengjunhong.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://fengjunhong.github.io/tags/vue/"}]},{"title":"hexo个人博客的细节优化","slug":"hexo个人博客的细节优化","date":"2019-11-27T08:27:12.000Z","updated":"2020-08-29T06:51:48.926Z","comments":true,"path":"2019/11/27/hexo个人博客的细节优化/","link":"","permalink":"https://fengjunhong.github.io/2019/11/27/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BB%86%E8%8A%82%E4%BC%98%E5%8C%96/","excerpt":"添加分享功能找到主题配置文件（\\themes \\ next \\ _config.yml）,如下修改即可 123baidushare: type: button baidushare: true","text":"添加分享功能找到主题配置文件（\\themes \\ next \\ _config.yml）,如下修改即可 123baidushare: type: button baidushare: true 修改文章间距找到 \\themes \\ next \\ source \\ css \\ _custom \\ _custom.styl 1234567.post &#123; margin-top: 0px; # 上外边距 margin-bottom: 60px; # 下外边距 padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; Next官网：Next官网链接 修改内容区域的宽度next主题的默认宽度（width：700px）如下图所示，太窄打开 \\themes \\ next \\ source \\ css \\ _variables \\ custom.styl 添加两行代码即可： 123# 路径：\\themes\\next\\source\\css\\_variables\\custom.styl$main-desktop = 1200px $content-desktop = 900px 看效果，此时width: 900px 创建分类和标签修改主题配置文件以下讲解tags和categories，其他同上 123456menu: home: / #about: /about/ || user categories: /categories/ // 标签 archives: /archives/ || archive tags: /tags/ //分类 创建categories文件和tags文件 修改xxx.index文件路径：在博客根目录source文件夹下 123456// categories/index.md的文件内容如下：---title: 分类date: 2019-11-26 17:14:17type: \"categories\"--- 123456// tags/index.md的文件内容如下：---title: 标签date: 2019-11-26 17:14:17type: \"tags\"--- 修改文章内容找到你要加标签和分类的文章 123456title: 薛之谦-演员top: truecategories: 娱乐tags: - 歌曲 自动更换背景图路径: 找到\\themes\\next\\source\\css_custom\\custom.styl，如下修改内容 1234567// 自动更换背景body &#123; //background:url(https://source.unsplash.com/random/1600x900); background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%;&#125; 创建右上角github入口找到\\themes\\next\\layout\\ _layout.swig文件 将以下内容添加至, &lt;div class=”headband”&gt;&lt;/div&gt;下面一行 1&lt;a href=\"https://your-url\" class=\"github-corner\" aria-label=\"View source on GitHub\"&gt;&lt;svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" style=\"fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;\" aria-hidden=\"true\"&gt;&lt;path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"&gt;&lt;/path&gt;&lt;path d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style=\"transform-origin: 130px 106px;\" class=\"octo-arm\"&gt;&lt;/path&gt;&lt;path d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\" class=\"octo-body\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt; 侧边栏社交小图标设置 打开主题配置文件（_config.yml），搜索social_icons:,在fontawesome图标库（网址）找自己喜欢的小图标，并将名字复制在如下位置配置文件 12345social: GitHub: https://github.com/yourname || github E-Mail: mailto:邮箱地址 || envelo Weibo: https://weibo.com/yourname || weibo CSDN: https://me.csdn.net/yourname || book 设置版权声明实现下图效果 站点配置文件找到站点配置文件,把url改为你自己的github访问路径 主题配置文件找到主题配置文件，新增或修改为如下代码 123456# 开启版权声明# Declare license on postspost_copyright: enable: true # 是否开启 license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 添加顶部加载条打开/themes/next/layout/_partials/head.swig文件，在maximum-scale=1”/&gt;后添加如下代码: 12&lt;script src=\"//cdn.bootcss.com/pace/1.0.2/pace.min.js\"&gt;&lt;/script&gt;&lt;link href=\"//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css\" rel=\"stylesheet\"&gt; 但是，默认的是粉色的，要改变颜色可以在/themes/next/layout/_partials/head.swig文件中添加如下代码（接在刚才link的后面） 12345678910111213&lt;style&gt; .pace .pace-progress &#123; background: #1E92FB; /*进度条颜色*/ height: 3px; &#125; .pace .pace-progress-inner &#123; box-shadow: 0 0 10px #1E92FB, 0 0 5px #1E92FB; /*阴影颜色*/ &#125; .pace .pace-activity &#123; border-top-color: #1E92FB; /*上边框颜色*/ border-left-color: #1E92FB; /*左边框颜色*/ &#125;&lt;/style&gt;","categories":[{"name":"hexo","slug":"hexo","permalink":"https://fengjunhong.github.io/categories/hexo/"}],"tags":[]},{"title":"使用hexo和github搭建个人博客","slug":"hexo和github搭建博客","date":"2019-11-26T01:45:53.000Z","updated":"2020-08-29T06:51:48.927Z","comments":true,"path":"2019/11/26/hexo和github搭建博客/","link":"","permalink":"https://fengjunhong.github.io/2019/11/26/hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"问题一：nrm : 无法加载文件 C:\\Users\\TANG\\AppData\\Roaming\\npm\\nrm.ps1，因为在此系统上禁止运行脚本。 处理方式： https://www.cnblogs.com/lingblog/p/11845011.html 搭建博客步骤GitHub创建个人仓库 登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：Build software better, together 点击GitHub中的New repository创建新仓库，仓库名应该为：用户名.http://github.io 这个用户名使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看廖雪峰老师的Git教程：Git教程 从Git官网下载：Git - Downloading Package 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash 12git config --global user.name \"你的GitHub用户名\"git config --global user.email \"你的GitHub注册邮箱\" 生成ssh密钥文件： 1ssh-keygen -t rsa -C \"你的GitHub注册邮箱\" 然后直接三个回车即可，默认不需要设置密码然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制 新建SSH密钥 安装Node.js Hexo基于Node.js，Node.js下载地址：Download | Node.js 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v : 安装Hexo Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为MyBlog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行 1npm install -g hexo-cli 这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入： 1hexo init blog 注意，这里的命令都是切换到blog文件夹中。 1234PS D:\\MyProject\\MyBlog&gt; cd blog hexo new test_my_site hexo g # 生成 hexo s # 启动服务 这些命令在后面作介绍，完成后，打开浏览器输入地址： localhost:4000 转载","categories":[{"name":"hexo","slug":"hexo","permalink":"https://fengjunhong.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://fengjunhong.github.io/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://fengjunhong.github.io/tags/github/"}]}]}